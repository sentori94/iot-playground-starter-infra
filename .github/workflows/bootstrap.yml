name: "Terraform Bootstrap"
on:
  workflow_dispatch:
    inputs:
      MODE:
        description: "Terraform mode"
        type: choice
        required: true
        default: plan
        options: [plan, apply]
      STATE_BUCKET_NAME:
        description: "Nom unique du bucket S3 pour stocker le state"
        required: true
        default: iot-playground-tfstate

env:
  AWS_REGION: eu-west-3

jobs:
  setup-backend:
    name: "Setup Backend (S3+DynamoDB)"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}
      - name: Create S3 bucket + DynamoDB if missing
        run: |
          set -e
          BUCKET="${{ github.event.inputs.STATE_BUCKET_NAME }}"
          REGION="${{ env.AWS_REGION }}"

          # S3 bucket (idempotent)
          if aws s3api head-bucket --bucket "$BUCKET" 2>/dev/null; then
            echo "Bucket $BUCKET already exists"
          else
            if [ "$REGION" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "$BUCKET"
            else
              aws s3api create-bucket --bucket "$BUCKET" \
                --create-bucket-configuration LocationConstraint="$REGION"
            fi
          fi

          # DynamoDB table (idempotent) - note: PAY_PER_REQUEST (et pas PAYPERREQUEST)
          if aws dynamodb describe-table --table-name terraform-locks >/dev/null 2>&1; then
            echo "DynamoDB table terraform-locks already exists"
          else
            aws dynamodb create-table \
              --table-name terraform-locks \
              --billing-mode PAY_PER_REQUEST \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH
          fi

  deploy-infra:
    name: "Deploy Infra [${{ github.event.inputs.MODE }}]"
    needs: setup-backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init (configure S3 backend)
        working-directory: infra/envs/dev
        run: |
          terraform init -input=false \
            -backend-config="bucket=${{ github.event.inputs.STATE_BUCKET_NAME }}" \
            -backend-config="key=envs/dev/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=terraform-locks" \
            -backend-config="encrypt=true"

      - name: Terraform plan
        if: ${{ github.event.inputs.MODE == 'plan' }}
        working-directory: infra/envs/dev
        run: terraform plan -no-color -input=false -var="state_bucket_name=${{ github.event.inputs.STATE_BUCKET_NAME }}" -var="db_username=${{ secrets.DB_USERNAME }}"

      - name: Terraform apply
        if: ${{ github.event.inputs.MODE == 'apply' }}
        working-directory: infra/envs/dev
        run: terraform apply -auto-approve -input=false -var="state_bucket_name=${{ github.event.inputs.STATE_BUCKET_NAME }}" -var="db_username=${{ secrets.DB_USERNAME }}"
